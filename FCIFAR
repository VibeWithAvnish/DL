import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

# Define class names for CIFAR-10
class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']

# Load training data from CSV file
train_data = pd.read_csv(r"C:\Avnish\desktop_new\Sem 7\z_DL_Dataset\cifar10\train.csv")
x_train = train_data.iloc[:, :-1].values  # All columns except the last one are pixel values
y_train = train_data['label'].values      # The last column is the label

# Load testing data from CSV file (without labels)
test_data = pd.read_csv(r"C:\Avnish\desktop_new\Sem 7\z_DL_Dataset\cifar10\test.csv")
x_test = test_data.values                 # All columns are pixel values

# Normalize the pixel values
x_train = x_train / 255.0
x_test = x_test / 255.0

# Reshape the data to match CIFAR-10 image dimensions (32, 32, 3)
x_train = x_train.reshape(-1, 32, 32, 3)
x_test = x_test.reshape(-1, 32, 32, 3)

# One-hot encode the labels
y_train_encoded = tf.keras.utils.to_categorical(y_train, 10)

# Split the data into training and validation sets
x_train_split, x_val, y_train_split, y_val = train_test_split(x_train, y_train, test_size=0.2, random_state=42)

# One-hot encode the new training set labels
y_train_split_encoded = tf.keras.utils.to_categorical(y_train_split, 10)

# Build the model
model = Sequential([
    Flatten(input_shape=(32, 32, 3)),  # Flatten 32x32x3 images
    Dense(512, activation='relu'),
    Dense(256, activation='relu'),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')  # 10 output classes for CIFAR-10
])

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model on the training split
history = model.fit(x_train_split, y_train_split_encoded, epochs=10, batch_size=32, validation_data=(x_val, tf.keras.utils.to_categorical(y_val, 10)))

# Plot training & validation accuracy over epochs
plt.figure(figsize=(12, 4))
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

# Make predictions on the validation set
val_predictions = model.predict(x_val)
y_val_pred_classes = np.argmax(val_predictions, axis=1)

# Generate the classification report
report = classification_report(y_val, y_val_pred_classes, target_names=class_names)
print(report)

# Make predictions on the test set
predictions = model.predict(x_test)
y_pred_classes = np.argmax(predictions, axis=1)

# Display a few test images with predicted labels
num_images = 5
random_indices = np.random.choice(x_test.shape[0], num_images, replace=False)

plt.figure(figsize=(15, 3))
for i, idx in enumerate(random_indices):
    test_image = x_test[idx]
    predicted_label = y_pred_classes[idx]
    predicted_class_name = class_names[predicted_label]
    
    plt.subplot(1, num_images, i + 1)
    plt.imshow(test_image)
    plt.title(f"Pred: {predicted_class_name}")
    plt.axis('off')

plt.tight_layout()
plt.show()
